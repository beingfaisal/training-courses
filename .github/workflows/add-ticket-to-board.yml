# This workflow runs when an issue is created; it adds all Issues
# from this repo to the open edx training courses board
# https://github.com/orgs/openedx/projects/15/views/1

name: Add newly created issues to the training course project board
on:
  issues:
    types: [opened]  

jobs:
  # Add the ticket to the board
  add_to_board:
    runs-on: ubuntu-latest
    steps:
      # Generate a token from org-level GitHub App because projects (beta)
      # are defined at the org level
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0
        with:
          app_id: ${{ secrets.GRAPHQL_AUTH_APP_ID }}
          private_key: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}

      - name: Get DEPR project ID
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ORGANIZATION: openedx
          PROJECT_NUMBER: 15
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV

      - name: Add issue to project
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"
